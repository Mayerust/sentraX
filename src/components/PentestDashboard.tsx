import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Shield, 
  Terminal, 
  Search, 
  Zap, 
  Key, 
  EyeOff, 
  FileText,
  Play,
  Square,
  Activity,
  AlertTriangle,
  CheckCircle,
  XCircle
} from 'lucide-react';
import { PentestPhaseCard } from './PentestPhaseCard';
import { TerminalOutput } from './TerminalOutput';
import { TargetInput } from './TargetInput';
import { GPTAnalysis } from './GPTAnalysis';
import { ReportGenerator } from './ReportGenerator';
import { UserPromptWorkflow } from './UserPromptWorkflow';
import { RiskScoringEngine } from './RiskScoringEngine';
import { useToast } from '@/hooks/use-toast';

const PENTEST_PHASES = [
  {
    id: 'reconnaissance',
    name: 'Reconnaissance',
    icon: Search,
    description: 'Information gathering and target enumeration',
    color: 'cyber-blue'
  },
  {
    id: 'scanning',
    name: 'Scanning',
    icon: Activity,
    description: 'Port scanning and service enumeration',
    color: 'cyber-green'
  },
  {
    id: 'exploitation',
    name: 'Exploitation',
    icon: Zap,
    description: 'Gaining access to target systems',
    color: 'cyber-orange'
  },
  {
    id: 'maintaining_access',
    name: 'Maintaining Access',
    icon: Key,
    description: 'Establishing persistent access',
    color: 'cyber-purple'
  },
  {
    id: 'covering_tracks',
    name: 'Covering Tracks',
    icon: EyeOff,
    description: 'Removing evidence and logs',
    color: 'cyber-red'
  },
  {
    id: 'reporting',
    name: 'Reporting',
    icon: FileText,
    description: 'Generating comprehensive pentest report',
    color: 'cyber-green'
  }
];

interface Target {
  ip: string;
  status: 'pending' | 'scanning' | 'complete' | 'error';
  findings: any[];
}

export const PentestDashboard: React.FC = () => {
  const [targets, setTargets] = useState<Target[]>([]);
  const [currentPhase, setCurrentPhase] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [isScanning, setIsScanning] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);
  const [gptAnalysis, setGptAnalysis] = useState<string>('');
  const [report, setReport] = useState<any>(null);
  const [customWorkflow, setCustomWorkflow] = useState<string>('');
  const [workflowPriority, setWorkflowPriority] = useState<string>('comprehensive');
  const [pentestData, setPentestData] = useState<any>(null);
  const { toast } = useToast();

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const simulateGPTAnalysis = (phase: string, data: any) => {
    const baseAnalyses = {
      reconnaissance: "GPT-4 Analysis: Target appears to be a web server with multiple open ports. Recommend focusing on HTTP/HTTPS services and checking for common vulnerabilities.",
      scanning: "GPT-4 Analysis: Nmap scan reveals SSH (22), HTTP (80), and HTTPS (443) ports open. Detected Apache 2.4.41 with potential CVE-2021-44228 vulnerability.",
      exploitation: "GPT-4 Analysis: Log4j vulnerability detected. Recommend using exploit/multi/http/log4j_header_injection module in Metasploit for initial access.",
      maintaining_access: "GPT-4 Analysis: Successful exploitation achieved. Recommend creating persistent backdoor via cron job and establishing reverse shell for continued access.",
      covering_tracks: "GPT-4 Analysis: Evidence removal complete. Cleared /var/log/auth.log, /var/log/apache2/access.log, and bash history. Removed uploaded payloads.",
      reporting: "GPT-4 Analysis: Pentest complete. High-severity Log4j vulnerability found allowing remote code execution. Immediate patching required."
    };
    
    setTimeout(() => {
      let analysis = baseAnalyses[phase as keyof typeof baseAnalyses] || "GPT-4 Analysis pending...";
      
      // Enhance analysis with custom workflow if provided
      if (customWorkflow) {
        analysis += `\n\n🎯 Custom Workflow Applied: ${customWorkflow.slice(0, 100)}...`;
        analysis += `\n⚡ Priority Mode: ${workflowPriority.toUpperCase()}`;
      }
      
      setGptAnalysis(analysis);
    }, 1500);
  };

  const runPentestPhase = async (phase: string) => {
    setCurrentPhase(phase);
    addLog(`Starting ${phase} phase...`);
    
    // Simulate phase execution
    const phaseDuration = 3000 + Math.random() * 2000;
    const steps = 20;
    const stepDuration = phaseDuration / steps;
    
    for (let i = 0; i <= steps; i++) {
      await new Promise(resolve => setTimeout(resolve, stepDuration));
      setProgress((i / steps) * 100);
      
      if (i % 5 === 0) {
        const phaseMessages = {
          reconnaissance: [
            "Querying Shodan API for target information...",
            "Performing WHOIS lookup...",
            "Gathering DNS records...",
            "Checking for subdomain enumeration..."
          ],
          scanning: [
            "Executing Nmap port scan (-sV -sC)...",
            "Detecting OS fingerprint...",
            "Enumerating services...",
            "Checking for common vulnerabilities..."
          ],
          exploitation: [
            "Loading Metasploit framework...",
            "Selecting exploit module...",
            "Setting target parameters...",
            "Executing exploit payload..."
          ],
          maintaining_access: [
            "Establishing persistent connection...",
            "Creating backdoor access...",
            "Setting up reverse shell...",
            "Configuring automated callbacks..."
          ],
          covering_tracks: [
            "Clearing system logs...",
            "Removing temporary files...",
            "Clearing command history...",
            "Restoring original configurations..."
          ],
          reporting: [
            "Compiling findings...",
            "Generating vulnerability report...",
            "Creating remediation recommendations...",
            "Finalizing executive summary..."
          ]
        };
        
        const messages = phaseMessages[phase as keyof typeof phaseMessages] || [];
        if (messages[Math.floor(i / 5)]) {
          addLog(messages[Math.floor(i / 5)]);
        }
      }
    }
    
    addLog(`${phase} phase completed successfully`);
    simulateGPTAnalysis(phase, {});
    
    // Move to next phase automatically
    const currentIndex = PENTEST_PHASES.findIndex(p => p.id === phase);
    if (currentIndex < PENTEST_PHASES.length - 1) {
      setTimeout(() => {
        runPentestPhase(PENTEST_PHASES[currentIndex + 1].id);
      }, 2000);
    } else {
      setIsScanning(false);
      setCurrentPhase(null);
      setProgress(100);
      
      // Update pentest data for risk scoring
      setPentestData({
        targets: targets,
        phases: PENTEST_PHASES,
        customWorkflow,
        workflowPriority,
        timestamp: new Date().toISOString()
      });
      
      generateReport();
      toast({
        title: "🚀 Pentest Complete - Enterprise Analysis Ready",
        description: "AI-powered risk scoring and custom workflow analysis complete!",
      });
    }
  };

  const startPentest = async (targetIPs: string[]) => {
    if (targetIPs.length === 0) {
      toast({
        title: "Error",
        description: "Please enter at least one target IP",
        variant: "destructive"
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setLogs([]);
    setGptAnalysis('');
    setTargets(targetIPs.map(ip => ({ ip, status: 'scanning', findings: [] })));
    
    addLog('🚀 sentraX AI Pentest Automation v2.0 - ENTERPRISE EDITION');
    addLog(`🎯 Target(s): ${targetIPs.join(', ')}`);
    addLog('🧠 GPT-4 Enhanced AI + Custom Workflow Engine Active');
    if (customWorkflow) {
      addLog(`📋 Custom Workflow: ${customWorkflow.slice(0, 50)}...`);
      addLog(`⚡ Priority Mode: ${workflowPriority.toUpperCase()}`);
    }
    addLog('🛡️ Advanced Risk Scoring Engine Initialized');
    
    setTimeout(() => {
      runPentestPhase(PENTEST_PHASES[0].id);
    }, 1000);
  };

  const stopPentest = () => {
    setIsScanning(false);
    setCurrentPhase(null);
    addLog('⏹️ Pentest stopped by user');
    toast({
      title: "⏹️ Pentest Stopped",
      description: "Enterprise penetration test has been terminated.",
    });
  };

  const handleCustomWorkflow = (prompt: string, priority: string) => {
    setCustomWorkflow(prompt);
    setWorkflowPriority(priority);
    addLog(`🎯 Custom AI workflow applied: ${prompt.slice(0, 50)}...`);
    addLog(`⚡ Priority set to: ${priority.toUpperCase()}`);
    toast({
      title: "🧠 AI Workflow Applied",
      description: "Custom pentesting strategy configured successfully!",
    });
  };

  const generateReport = () => {
    const reportData = {
      timestamp: new Date().toISOString(),
      targets: targets.map(t => t.ip),
      customWorkflow: customWorkflow || 'Standard pentesting workflow',
      workflowPriority: workflowPriority,
      phases: PENTEST_PHASES.map(phase => ({
        name: phase.name,
        status: 'completed',
        findings: phase.id === 'exploitation' ? ['Log4j RCE vulnerability'] : []
      })),
      vulnerabilities: [
        {
          severity: 'Critical',
          title: 'Apache Log4j Remote Code Execution',
          cve: 'CVE-2021-44228',
          description: 'Remote code execution vulnerability in Apache Log4j library',
          remediation: 'Update Log4j to version 2.17.0 or higher',
          riskScore: 9.8
        }
      ],
      riskMetrics: {
        overallScore: 85,
        businessImpact: 'High',
        exploitability: 95,
        confidentialityImpact: 85,
        integrityImpact: 70,
        availabilityImpact: 92
      },
      summary: 'Critical vulnerability found requiring immediate attention - Enhanced with AI-driven workflow analysis'
    };
    setReport(reportData);
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-3">
            <Shield className="w-10 h-10 text-cyber-green animate-glow-pulse" />
            <h1 className="text-4xl font-bold bg-gradient-cyber bg-clip-text text-transparent">
              sentraX
            </h1>
          </div>
          <p className="text-xl text-muted-foreground">
            AI-Powered Network Penetration Testing Workflow
          </p>
          <Badge variant="outline" className="bg-cyber-green/10 text-cyber-green border-cyber-green/50">
            GPT-4 Enhanced • Automated • Professional
          </Badge>
        </div>

        {/* Main Dashboard */}
        <Tabs defaultValue="dashboard" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
            <TabsTrigger value="workflow">AI Workflow</TabsTrigger>
            <TabsTrigger value="phases">Phases</TabsTrigger>
            <TabsTrigger value="analysis">AI Analysis</TabsTrigger>
            <TabsTrigger value="risk">Risk Engine</TabsTrigger>
            <TabsTrigger value="report">Report</TabsTrigger>
          </TabsList>

          <TabsContent value="dashboard" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Control Panel */}
              <Card className="lg:col-span-1">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Terminal className="w-5 h-5" />
                    Control Panel
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <TargetInput onStartPentest={startPentest} isScanning={isScanning} />
                  
                  {isScanning && (
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-muted-foreground">Progress</span>
                        <span className="text-sm font-mono">{Math.round(progress)}%</span>
                      </div>
                      <Progress value={progress} className="h-2" />
                      {currentPhase && (
                        <Badge variant="outline" className="animate-glow-pulse">
                          {PENTEST_PHASES.find(p => p.id === currentPhase)?.name}
                        </Badge>
                      )}
                      <Button 
                        variant="danger" 
                        size="sm" 
                        onClick={stopPentest}
                        className="w-full"
                      >
                        <Square className="w-4 h-4 mr-2" />
                        Stop Pentest
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Terminal Output */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Terminal className="w-5 h-5 text-cyber-green" />
                    Live Output
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <TerminalOutput logs={logs} />
                </CardContent>
              </Card>
            </div>

            {/* Target Status */}
            {targets.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Target Status</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {targets.map((target, index) => (
                      <div key={index} className="flex items-center gap-3 p-3 border rounded-lg">
                        <div className="w-2 h-2 rounded-full bg-cyber-green animate-glow-pulse" />
                        <span className="font-mono text-sm">{target.ip}</span>
                        <Badge variant="outline">
                          {target.status}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="phases">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {PENTEST_PHASES.map((phase, index) => (
                <PentestPhaseCard
                  key={phase.id}
                  phase={phase}
                  isActive={currentPhase === phase.id}
                  isCompleted={currentPhase ? PENTEST_PHASES.findIndex(p => p.id === currentPhase) > index : false}
                  onExecute={() => !isScanning && runPentestPhase(phase.id)}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="analysis">
            <GPTAnalysis analysis={gptAnalysis} />
          </TabsContent>

          <TabsContent value="workflow">
            <UserPromptWorkflow 
              onPromptSubmit={handleCustomWorkflow}
              isActive={isScanning}
            />
          </TabsContent>

          <TabsContent value="risk">
            <RiskScoringEngine 
              pentestData={pentestData}
              isActive={!!pentestData}
            />
          </TabsContent>

          <TabsContent value="report">
            <ReportGenerator report={report} />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};